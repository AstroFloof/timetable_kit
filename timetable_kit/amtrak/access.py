#! /usr/bin/env python3
# amtrak/access.py
# Part of timetable_kit
# Copyright 2021, 2022 Nathanael Nerode.  Licensed under GNU Affero GPL v.3 or later.

"""
Make various dicts from station code to various station accessibility features.

Requires local copy of Amtrak stations database: That local copy is generated by "json_stations.py download"
This has very similar code to baggage.py
"""
from __future__ import annotations

import json

import pandas as pd

from timetable_kit.amtrak.json_stations import (
    load_stations_json,
    load_station_details,
)

# These are mine
from timetable_kit.debug import set_debug_level, debug_print
from timetable_kit.generic_agency import AgencyAccessibilityInfo


# FIXME: this should be relative to something.
# base_dir = Path(__file__).parent
# station_stats_dir = base_dir / "station_stats"
# stations_csv_path = station_stats_dir / "json_stations.csv"
# bad_stations_path = base_dir / "bad_stations.csv"

# This is a global filled on first use


class AmtrakAccessibilityInfo(AgencyAccessibilityInfo):
    _accessible_platform_dict: dict = None
    _inaccessible_platform_dict: dict = None

    def station_has_inaccessible_platform(self, stop_id: str) -> bool:
        """
        Does the station explicitly have an inaccessible platform?

        This excludes stations which don't say either way.
        """
        return self._inaccessible_platform_dict[stop_id]

    def station_has_accessible_platform(self, stop_id: str) -> bool:
        """
        Does this station explicitly have an accessible platform?

        This excludes stations which don't say either way.
        """
        return self._accessible_platform_dict[stop_id]

    def _gather_accessibility_info(self):
        """
        Make dicts which map from station code to accessibility status.

        Requires that the JSON stations database already be downloaded.
        """
        stations_json = load_stations_json()

        # Believe it or not, this line JUST WORKS!!!!  Wow!
        stations = pd.io.json.read_json(stations_json, orient="records")
        station_list = stations["code"].array

        for code in station_list:
            station_details_json = load_station_details(code)
            if station_details_json in ["{}", "{}\n"]:  # Bad station
                debug_print(1, "Bad station details for", code, ": assuming nothing")
                self._accessible_platform_dict[code] = False
                self._inaccessible_platform_dict[code] = False
            else:
                parsed_json = json.loads(station_details_json)
                # Exactly five tabs in details, one of which is "accessibility".
                access_json = parsed_json["accessibility"]

                # First pass through for accessible platform:
                for x in access_json:
                    # Each element looks like {"feature", "blahblahblah"}.
                    if x.get("feature") == "Accessible platform":
                        self._accessible_platform_dict[code] = True
                        break
                else:  # Did not break out of the loop
                    self._accessible_platform_dict[code] = False

                # Second pass through for inaccessible platform:
                for x in access_json:
                    if x.get("feature") == "No accessible platform":
                        self._inaccessible_platform_dict[code] = True
                        break
                else:  # Did not break out of the loop
                    self._inaccessible_platform_dict[code] = False

                if (
                    self._accessible_platform_dict[code]
                    and self._inaccessible_platform_dict[code]
                ):
                    # Should never happen
                    print("Platform both accessible and inaccessible at", code)
        print("Built accessible platform dicts")
        # Finally out of the loop
        return


# TESTING
if __name__ == "__main__":
    set_debug_level(2)
