For prettiness:
1 -- get the "sleeper" symbol printing (the icon and hooks are ready)
2 -- implement alternating-line grey background style

Wishlist:
10 -- "Reverse style" timetables with stations on top and trains on the left.  This would just be cool.
(OK.  It would be AWESOME.)

For making updates easier:
-- Read a JSON option for "trains_per_page" -- if present, make multipage timetable (with mostly-shared CSS)
---- Splitter routine takes one TTSpec, returns a list of TTSpecs
-- implement auto-search for valid reference dates
---- catch breakage on a per-page basis or a per-file basis?

For my Amish friend:
-- verify that CSVs are working and prep some

For packaging:
-- Figure out how to locate cached data (for GTFS) and persistent data (for templates etc)
-- see the XDG standard

For internal cleanliness & generalizing beyond Amtrak and VIA: 
-- consider breaking out a text_time.py from text_presentation.py
-- Isolate the GTFS downloads
-- Simplify Amtrak JSON->GTFS wheelchair access coding

For making updates easier:
-- Adapt check_ghost_trains.py to compare a list to weekday / saturday / sunday / weekend output
from the ./list_trains.py program (this is currently largely manual)

-- Fail if duplicate TSNs are called, rather than warning (avoids trouble, forces disambiguation)

For VIA and generic timetables:
1 -- start reading calendar_dates.txt

For simplifying and making Amtrak & VIA work better:
1 -- Add checked_baggage field to GTFS specification (stops.txt and trips.txt).
     This is way too SOCIAL for me to want to actually do it!
     But it would massively simplify a large hunk of code

Internal cleanup:
    Deal with the convoluted interactions between the agency object and the feed object.
    Possoble plan for this: pass the agency through to produce_timetable instead of the feed.
    Initialize the feed in the initialization of the agency (possibly with commandline override).
    The feed is then available and present within the agency object.

1 -- consider adding "Route name" notation based on location of Station column (see Hartford Line)

2 -- Routine to print out calendar for a single route,
     with out-of-period dates removed, for inspection

3 -- Test install and resolve other problematic directory references

4 -- Resolve command-line functions in amtrak/ & via/ into a __main__.py

5 -- Improve calendar filtering for days of week
    Still not clear what the best approach for this is.

    Failing to filter for the days of the week can give two calendars
    or zero, where I'm looking for one.

    Amtrak, upsettingly, has a lot of weird one-day service calendars.
    These are best described as "confusing".  This messed up the CONO
    timetable generator for 20220312.

    To make matters worse, there are calendar gaps in other timetables,
    like the Cardinal one.  We need a better presentation on this crap.

6 -- Sanitize pathnames coming from command line and environment.
    We're very sloppy right now.

7 -- add a way to specify "special CSS" in the JSON, in order to avoid duplicative work in the CSV.
      Basically allow a CSS class, or several, to be embedded in the JSON and referenced in the CSV.

8 -- lean on pre-existing code in GTFS_kit where possible (restrict_*)


Fine for never:
9 -- implement prototype spec generator using toposort to merge station lists.
     This is really a many-step process.

Timetable update stuff:
-----------------------

Fix:
-- Hartford Line Valley Flyer
-- Keystone Service
-- Virginia Services

Known Amtrak GTFS bugs:
- Bug in Arizona times (listing as Denver rather than Phoenix), reported & patched
-- Get Amtrak to fix GTFS days of operation:
---- Sunset Limited, Hiawatha, Silver Service 

VIA Rail stuff:
- Check for which stations are "manned" for checked baggage info

Amtrak schedules to put off, because these have printable state agency timetables, or almost:
- Downeaster
---- The official timetable is better than anything I can produce.
- San Joaquins
- Capitol Corridor
- Pacific Surfliner
- Cascades - Oregon Point bus schedule problem
