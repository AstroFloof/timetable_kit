The HTML file can (and sometimes should) be converted to PDF.  
I am currently using WeasyPrint for this because it is also a Python package.

-- Weasyprint can't handle inline SVGs.  AAARGH!
-- OK, Weasyprint is the best option, but the SVGs have to be done as images.

This means we really want two different HTML files: one for Weasy with image files,
and one with embedded SVGs.  This means a major fork in all the code.  Most annoying!

Weasyprint also can't handle variable-weight fonts.  Oh Well.

-- It is hard to test PDFs.  At least on my monitor...
--- Okular needs to be set at 90% zoom to show it real size.
--- Evince needs to be set at 50% zoom to show it real size.

We can convert the PDF to a JPEG as follows (and it is readable!):
pdftoppm -jpeg -r 300 -singlefile tt_foo.pdf tt_foo
Another (untested, likely faster) option is vips:
vips copy tt_foo.pdf[dpi=300] tt_foo.jpg

Amtrak train numbers are in the "trip_short_name" field of GTFS static data
Amtrak station codes are in the "stop_id" field of GTFS static data.
Amtrak trip_ids currently consist of the trip_short_name with the service_id concatenated after it.  This might change.

Amtrak GTFS has some problems.  It frequently has one-day "calendars".  These aren't really desirable for normal
printed timetables.  It's also missing a reasonable end date on certain services.  Has to be massaged by hand...

Station full names are retrieved from the Amtrak station data on the Web which is on the web in json format;
the json files for the station data must be downloaded in advance, 
using './amtrak/json_stations.py download' into the ./amtrak/stations/ directory.
This is to avoid beating too hard on Amtrak's website.

Jinja2 templates are probably a good idea for forking the code into
weasyprint and non-weasyprint varieties.

PANDAS also relies on Jinja2 templates located in /usr/lib/python3/dist-packages/pandas/io/formats/templates
And it would make a lot of sense to pass a custom template to the Styler to overcome certain problems.
