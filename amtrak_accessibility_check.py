#! /usr/bin/env python3
# amtrak_accessibility_check.py
# Part of timetable_kit
# Copyright 2021, 2022 Nathanael Nerode.  Licensed under GNU Affero GPL v.3 or later.

'''
Take Amtrak's station database and process it to find deficits in accessibility.
Requires wikipedia/train_stations_only.txt, produced by get_wiki_stations.py
 (because bus stops don't have the same access features)
Requires local copy of Amtrak stations database in ./amtrak_stations
This is generated by amtrak_json_stations.py
'''

from pathlib import Path
import pandas as pd
import json

# These are mine
import amtrak_json_stations
from amtrak_json_stations import load_stations_json
from amtrak_json_stations import download_stations_json
from amtrak_json_stations import load_station_details
from amtrak_json_stations import download_station_details

station_stats_pathname = "./amtrak_station_stats"
stations_csv_pathname = station_stats_pathname + "/json_stations.csv"

def make_station_stats():
    local=True
    # stations_json = None # fill in next
    if local:
        stations_json = load_stations_json()
    else:
        stations_json = download_stations_json()

    # Believe it or not, this line JUST WORKS!!!!  Wow!
    stations = pd.io.json.read_json(stations_json,orient='records')
    # OK.  So let's dump-print that table...
    stations_csv_path = Path(stations_csv_pathname)
    stations.to_csv(stations_csv_path, index=False)
    print (stations_csv_pathname + " dumped.")
    # Note: 'country' is blank or CA for Canada (nothing else); stationAlias is of little value
    # OK, so there are stations with defective details JSON records (aaaargh!)
    # Should report that to Amtrak TODO
    # BAT has a webpage.  The others are just blank.
    station_list = stations["code"].array
    bad_station_list = ["BAT","MOH", "BNN","DTR","PDT","AVC","TAP","WBT"]
    cleaned_station_list = list(filter(lambda x : not x in bad_station_list, station_list))

    # These are sets, so the "add only if not present" logic is automatic
    possible_features = set(())
    possible_baggage = set(())
    possible_parking = set(())
    possible_accessibility = set(())
    # Hours are different, don't try the same trick
    # possible_hours = set(())

    # Simultaneously accumulate certain lists of stations...
    inaccessible_platforms = set(())
    no_wheelchair_lifts = set(())
    high_platforms = set(())

    # Get a list of train stations excluding bus stops, from a file
    train_stations_only_file = open("./wikipedia/train-stations-only.txt")
    train_stations_only_contents = train_stations_only_file.read()
    train_stations_only_list = train_stations_only_contents.splitlines()

    for code in cleaned_station_list:
        print ("Analyzing " + code)
        station_details_json = None
        if local:
            station_details_json = load_station_details(code)
        else:
            station_details_json = download_station_details(code)

        # The details aren't in a form where pd.io.json.read_json likes it
        # Works better to use json.load on the json... process later
        # Need "loads" to load from string
        parsed_json = json.loads(station_details_json)
        # Exactly five tabs in details -- if this fails, add to the bad_station_list above
        feature_json = parsed_json["feature"]
        baggage_json = parsed_json["baggage"]
        parking_json = parsed_json["parking"]
        accessibility_json = parsed_json["accessibility"]
        hours_json = parsed_json["hours"]

        if False:
            # This is a sanity check on Amtrak's data.
            del parsed_json["feature"]
            del parsed_json["baggage"]
            del parsed_json["parking"]
            del parsed_json["accessibility"]
            del parsed_json["hours"]
            if (parsed_json):
                print ("Whoops, extra JSON information for station " + code)

        # We ignore the keys other than "feature" and pull out the strings after "feature"
        # We know there are some {} dicts so we have to check for the feature key presence
        for x in feature_json:
            if "feature" in x:
                possible_features.add(x["feature"])
        for x in baggage_json:
            if "feature" in x:
                possible_baggage.add(x["feature"])
        for x in parking_json:
            if "feature" in x:
                possible_parking.add(x["feature"])
        for x in accessibility_json:
            if "feature" in x:
                possible_accessibility.add(x["feature"])
                # Track the list of inaccessible stations.  Ignore bus stops.
                if x["feature"] == "No accessible platform":
                    if (code in train_stations_only_list):
                        inaccessible_platforms.add(code)
                if x["feature"] == "No wheelchair lift":
                    if (code in train_stations_only_list):
                        no_wheelchair_lifts.add(code)
                if x["feature"] == "High platform":
                    if (code in train_stations_only_list):
                        high_platforms.add(code)

    # Finally out of the loop
    print("Went through all stations, no whammies")

    with open(station_stats_pathname + "/possible_features.txt",'w') as possible_features_file:
        possible_features_file.write('\n'.join(sorted(possible_features)))
    with open(station_stats_pathname + "/possible_baggage.txt",'w') as possible_baggage_file:
        possible_baggage_file.write('\n'.join(sorted(possible_baggage)))
    with open(station_stats_pathname + "/possible_parking.txt",'w') as possible_parking_file:
        possible_parking_file.write('\n'.join(sorted(possible_parking)))
    with open(station_stats_pathname + "/possible_accessibility.txt",'w') as possible_accessibility_file:
        possible_accessibility_file.write('\n'.join(sorted(possible_accessibility)))

    with open(station_stats_pathname + "/inaccessible_platforms.txt",'w') as inaccessible_platforms_file:
        inaccessible_platforms_file.write('\n'.join(sorted(inaccessible_platforms)))

    low_platform_no_wheelchair_lifts = set(())
    for x in no_wheelchair_lifts:
        if x not in high_platforms:
            low_platform_no_wheelchair_lifts.add(x);

    with open(station_stats_pathname + "/no_wheelchair_lifts.txt",'w') as no_wheelchair_lifts_file:
        no_wheelchair_lifts_file.write('\n'.join(sorted(low_platform_no_wheelchair_lifts)))

    print("Station stats files placed in " + station_stats_pathname)

# MAIN PROGRAM
if __name__ == "__main__":

    if not ( Path(station_stats_pathname).exists() ):
        Path(station_stats_pathname).mkdir(parents=True)

    make_station_stats()
    quit()
